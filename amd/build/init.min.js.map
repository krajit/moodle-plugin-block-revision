{"version":3,"file":"init.min.js","sources":["../src/init.js"],"sourcesContent":["define(['jquery', 'core/ajax', 'core/notification'], function($, Ajax, Notification) {\n    return {\n        init: function() {\n\n            function saveData() {\n                const selectedRadio = $('input[name=\"learningLevel\"]:checked');\n                const selectedLevel = selectedRadio.length ? selectedRadio.next('label').data('value') : '';\n                const count = $('#revisionCount').val();\n                const date = $('#nextReview').val();\n                const pageurl = window.location.pathname + window.location.search;\n\n                if (!selectedLevel && !count && !date) {\n                    // Nothing to save\n                    return;\n                }\n\n                Ajax.call([{\n                    methodname: 'block_revision_save_entry',\n                    args: {\n                        learninglevel: selectedLevel,\n                        revisioncount: parseInt(count),\n                        nextreview: date,\n                        pageurl: pageurl\n                    },\n                    done: function(response) {\n                        window.console.log('Saved:', response.status);\n                    },\n                    fail: Notification.exception\n                }]);\n            }\n\n            function loadExistingData() {\n                const pageurl = window.location.pathname + window.location.search;\n\n                Ajax.call([{\n                    methodname: 'block_revision_get_entry',\n                    args: { pageurl: pageurl },\n                    done: function(data) {\n                        if (data.learninglevel) {\n                            $(`label[data-value=\"${data.learninglevel}\"]`).prev('input').prop('checked', true);\n                        }\n                        if (data.revisioncount !== null) {\n                            $('#revisionCount').val(data.revisioncount);\n                        }\n                        if (data.nextreview) {\n                            $('#nextReview').val(data.nextreview);\n                        }\n                    },\n                    fail: Notification.exception\n                }]);\n            }\n\n            // Attach listeners for autosave\n            $('#revisionCount, #nextReview').on('input change', saveData);\n            $('input[name=\"learningLevel\"]').on('change', saveData);\n            \n\n            // Optional: initial save if you want to auto-save prepopulated data\n            // saveData();\n\n             loadExistingData(); // Fetch saved data on page load\n        }\n    };\n});\n"],"names":["define","$","Ajax","Notification","init","saveData","selectedRadio","selectedLevel","length","next","data","count","val","date","pageurl","window","location","pathname","search","call","methodname","args","learninglevel","revisioncount","parseInt","nextreview","done","response","console","log","status","fail","exception","on","prev","prop","loadExistingData"],"mappings":"AAAAA,6BAAO,CAAC,SAAU,YAAa,sBAAsB,SAASC,EAAGC,KAAMC,oBAC5D,CACHC,KAAM,oBAEOC,iBACCC,cAAgBL,EAAE,uCAClBM,cAAgBD,cAAcE,OAASF,cAAcG,KAAK,SAASC,KAAK,SAAW,GACnFC,MAAQV,EAAE,kBAAkBW,MAC5BC,KAAOZ,EAAE,eAAeW,MACxBE,QAAUC,OAAOC,SAASC,SAAWF,OAAOC,SAASE,QAEtDX,eAAkBI,OAAUE,OAKjCX,KAAKiB,KAAK,CAAC,CACPC,WAAY,4BACZC,KAAM,CACFC,cAAef,cACfgB,cAAeC,SAASb,OACxBc,WAAYZ,KACZC,QAASA,SAEbY,KAAM,SAASC,UACXZ,OAAOa,QAAQC,IAAI,SAAUF,SAASG,SAE1CC,KAAM5B,aAAa6B,aA0B3B/B,EAAE,+BAA+BgC,GAAG,eAAgB5B,UACpDJ,EAAE,+BAA+BgC,GAAG,SAAU5B,2BAtBpCS,QAAUC,OAAOC,SAASC,SAAWF,OAAOC,SAASE,OAE3DhB,KAAKiB,KAAK,CAAC,CACPC,WAAY,2BACZC,KAAM,CAAEP,QAASA,SACjBY,KAAM,SAAShB,MACPA,KAAKY,eACLrB,8BAAuBS,KAAKY,qBAAmBY,KAAK,SAASC,KAAK,WAAW,GAEtD,OAAvBzB,KAAKa,eACLtB,EAAE,kBAAkBW,IAAIF,KAAKa,eAE7Bb,KAAKe,YACLxB,EAAE,eAAeW,IAAIF,KAAKe,aAGlCM,KAAM5B,aAAa6B,aAY1BI"}